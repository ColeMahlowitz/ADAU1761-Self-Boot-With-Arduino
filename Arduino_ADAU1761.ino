/* Description:     Arduino code used in conjunction with Sigma Studio exported project files 
 *                  in order to use the Arduino as an external bootloader for the ADAU1761 DSP IC.
 *                  For public use by anyone.
 */


/********************************************** include I2C wire Library *******************************************************/

//as per the SoftI2CMaster library, one must include these definitions to establish which Arduino pins are SDA and SCL

#define SDA_PORT PORTC
#define SDA_PIN 4 // = A4
#define SCL_PORT PORTC
#define SCL_PIN 5 // = A5
#define I2C_MAXWAIT 1000

#include <SoftI2CMaster.h>

/*******************************************************************************************************************************/



/*
 * setup arduino serial and i2c communications
 */
void setup() {
  Serial.begin(9600);
    if (!i2c_init()) // Initialize everything and check for bus lockup
      Serial.println("I2C init failed");
}//end setup




//-------------------------------------------------------------------------------------------------------------------------------




/* Description: Macro that takes several parameters and calls the I2C library in order to write the incoming data to the DSP chip
 *  
 * Arguments: IC_address (8 bit device address), subAddress (16 bit subaddress), length of data (int), and the data itself (bytes)
 * 
 * Returns: nothing
 */
 
void SIGMA_WRITE_REGISTER_BLOCK(byte IC_address, word subAddress, int dataLength, byte pdata[]) {
  
  // start I2C transfer
  if (!i2c_start((IC_address)|I2C_WRITE)) { 
    Serial.println("I2C device busy for WRITE REGISTER BLOCK");
    return;
  }
  
  // write subAddresses. (ADAU1761 needs the 16 bit subAddress written as two 8 bit bytes with an "ACK" inbetween
  uint8_t addressLowByte = subAddress & 0xff;
  uint8_t addressHighByte = (subAddress >> 8);

  i2c_write(addressHighByte); 
  i2c_write(addressLowByte); 

  if (dataLength < 50 ) {
    for (int i=0; i<dataLength; i++) { 
      i2c_write(pdata[i]); //write data bytes
    }
  }
  else { 
    for (int i=0; i<dataLength; i++) {
      i2c_write(pgm_read_byte_near(pdata + i)); //write data bytes from PROGMEM (for param and program data)
    }
  }
  i2c_stop(); // stop the I2C communication
  
}




//-------------------------------------------------------------------------------------------------------------------------------




/* Description: Macro function that takes three parameters and writese a delay to the DSP chip after initiating the PLL 
 *  
 * Arguments: byte IC_address ( 8 bit device address), length of data (int), and the data itself (bytes)
 * 
 * Returns: nothing
 */
 
void SIGMA_WRITE_DELAY(byte IC_address, int dataLength, byte pdata[]) {

  //start I2C communication
  if (!i2c_start((IC_address)|I2C_WRITE)) { 
    Serial.println("I2C device busy for WRITE REGISTER BLOCK");
    return;
  }

  
  for (int i=0; i<dataLength; i++) {
    if (!i2c_write(pdata[i])) { //write data bytes
      return;
    }
  }
  i2c_stop(); // stop the I2C communication
  
}



  
//-------------------------------------------------------------------------------------------------------------------------------




/* Description: defines all addresses along with corresponding data
 *  
 * Arguments: IC_address (byte), Sub Addresses (words), and data byte arrays (unsigned char)
 * 
 * Returns: nothing
 */
 
void IC_Default_Download() {


  typedef unsigned short ADI_DATA_U16;
  typedef unsigned char  ADI_REG_TYPE;

  
  /***************************************************************************************************************/
  
  // define the IC address and the all the subAddresses
  // these may vary from schematic to schematic. You must check your *_IC_1.h file for the correct addresses
  
  
  #define DEVICE_ADDR_IC_1                                          0x70  
  #define REG_SAMPLE_RATE_SETTING_IC_1_ADDR                         0x40EB
  #define REG_DSP_RUN_REGISTER_IC_1_ADDR                            0x40F6
  #define REG_CLKCTRLREGISTER_IC_1_ADDR                             0x4000
  #define REG_PLLCRLREGISTER_IC_1_ADDR                              0x4002
  #define REG_SERIAL_PORT_CONTROL_0_IC_1_ADDR                       0x4015
  #define REG_ALC_CONTROL_0_IC_1_ADDR                               0x4011
  #define REG_MICCTRLREGISTER_IC_1_ADDR                             0x4008
  #define REG_RECORD_PWR_MANAGEMENT_IC_1_ADDR                       0x4009
  #define REG_ADC_CONTROL_0_IC_1_ADDR                               0x4019
  #define REG_PLAYBACK_MIXER_LEFT_CONTROL_0_IC_1_ADDR               0x401C
  #define REG_CONVERTER_CTRL_0_IC_1_ADDR                            0x4017
  #define REG_DAC_CONTROL_0_IC_1_ADDR                               0x402A
  #define REG_SERIAL_PORT_PAD_CONTROL_0_IC_1_ADDR                   0x402D
  #define REG_COMM_PORT_PAD_CTRL_0_IC_1_ADDR                        0x402F
  #define REG_JACKREGISTER_IC_1_ADDR                                0x4031
  #define PROGRAM_CLEAR_BLOCK_0_ADDR                                0x0800
  #define PROGRAM_CLEAR_BLOCK_1_ADDR                                0x08CC
  #define PROGRAM_CLEAR_BLOCK_2_ADDR                                0x0998
  #define PROGRAM_CLEAR_BLOCK_3_ADDR                                0x0A64
  #define PROGRAM_CLEAR_BLOCK_4_ADDR                                0x0BFC
  #define REG_DSP_ENABLE_REGISTER_IC_1_ADDR                         0x40F5
  #define REG_CRC_IDEAL_1_IC_1_ADDR                                 0x40C0
  #define REG_GPIO_0_CONTROL_IC_1_ADDR                              0x40C6
  #define REG_NON_MODULO_RAM_1_IC_1_ADDR                            0x40E9
  #define REG_WATCHDOG_ENABLE_IC_1_ADDR                             0x40D0
  #define REG_ROUTING_MATRIX_INPUTS_IC_1_ADDR                       0x40F2
  #define REG_ROUTING_MATRIX_OUTPUTS_IC_1_ADDR                      0x40F3
  #define REG_SERIAL_DATAGPIO_PIN_CONFIG_IC_1_ADDR                  0x40F4
  #define REG_DSP_SLEW_MODES_IC_1_ADDR                              0x40F7
  #define REG_SERIAL_PORT_SAMPLE_RATE_SETTING_IC_1_ADDR             0x40F8
  #define REG_CLOCK_ENABLE_REG_0_IC_1_ADDR                          0x40F9
  #define PROGRAM_ADDR_IC_1                                         0x0800
  #define PARAM_ADDR_IC_1                                           0x0000
  #define NON_MODULO_RAM_ADDR_IC_1                                  0x1FFE
  #define REG_DEJITTER_REGISTER_CONTROL_IC_1_ADDR                   0x4036                      
 
/***************************************************************************************************************/

  // define the size (length) of the subaddresses 
  // these may vary from schematic to schematic. You must check your *_IC_1.h file for the correct data sizes
  
  #define REG_SAMPLE_RATE_SETTING_IC_1_BYTE                         1
  #define REG_DSP_RUN_REGISTER_IC_1_BYTE                            1
  #define REG_CLKCTRLREGISTER_IC_1_BYTE                             1
  #define REG_PLLCRLREGISTER_IC_1_BYTE                              6
  #define R4_DELAY_IC_1_SIZE                                        2 
  #define R5_SERIAL_PORT_CONTROL_REGISTERS_IC_1_SIZE                2
  #define R6_ALC_CONTROL_REGISTERS_IC_1_SIZE                        4
  #define REG_MICCTRLREGISTER_IC_1_BYTE                             1
  #define R8_RECORD_INPUT_SIGNAL_PATH_REGISTERS_IC_1_SIZE           8
  #define R9_ADC_CONTROL_REGISTERS_IC_1_SIZE                        3
  #define R10_PLAYBACK_OUTPUT_SIGNAL_PATH_REGISTERS_IC_1_SIZE       14
  #define R11_CONVERTER_CONTROL_REGISTERS_IC_1_SIZE                 2
  #define R12_DAC_CONTROL_REGISTERS_IC_1_SIZE                       3
  #define R13_SERIAL_PORT_PAD_CONTROL_REGISTERS_IC_1_SIZE           1
  #define R14_COMMUNICATION_PORT_PAD_CONTROL_REGISTERS_IC_1_SIZE    2
  #define REG_JACKREGISTER_IC_1_BYTE                                1
  #define PROGRAM_CLEAR_BLOCK_0_SIZE                                1020
  #define PROGRAM_CLEAR_BLOCK_1_SIZE                                1020
  #define PROGRAM_CLEAR_BLOCK_2_SIZE                                1020
  #define PROGRAM_CLEAR_BLOCK_3_SIZE                                1020
  #define PROGRAM_CLEAR_BLOCK_4_SIZE                                15
  #define PROGRAM_SIZE_IC_1                                         1240
  #define REG_DSP_ENABLE_REGISTER_IC_1_BYTE                         1
  #define R22_CRC_REGISTERS_IC_1_SIZE                               5
  #define R23_GPIO_REGISTERS_IC_1_SIZE                              4
  #define R24_NON_MODULO_REGISTERS_IC_1_SIZE                        2
  #define R25_WATCHDOG_REGISTERS_IC_1_SIZE                          5
  #define REG_ROUTING_MATRIX_INPUTS_IC_1_BYTE                       1
  #define REG_ROUTING_MATRIX_OUTPUTS_IC_1_BYTE                      1
  #define REG_SERIAL_DATAGPIO_PIN_CONFIG_IC_1_BYTE                  1
  #define REG_DSP_SLEW_MODES_IC_1_BYTE                              1
  #define REG_SERIAL_PORT_SAMPLE_RATE_SETTING_IC_1_BYTE             1
  #define R32_CLOCK_ENABLE_REGISTERS_IC_1_SIZE                      2
  #define PARAM_SIZE_IC_1                                           556 
  #define NON_MODULO_RAM_SIZE_IC_1                                  8
  #define REG_DEJITTER_REGISTER_CONTROL_IC_1_BYTE                   1
                         
/***************************************************************************************************************/

  // store default data bytes as ADI REG TYPE (unsigned chars) 
  // these values will all vary from schematic to schematic 
  
  ADI_REG_TYPE R0_SAMPLE_RATE_SETTING_IC_1_Default[REG_SAMPLE_RATE_SETTING_IC_1_BYTE] = {0x7F};
  ADI_REG_TYPE R1_DSP_RUN_REGISTER_IC_1_Default[REG_DSP_RUN_REGISTER_IC_1_BYTE] = {0x00};
  ADI_REG_TYPE R2_CLKCTRLREGISTER_IC_1_Default[REG_CLKCTRLREGISTER_IC_1_BYTE] = {0x0F};
  ADI_REG_TYPE R3_PLLCRLREGISTER_IC_1_Default[REG_PLLCRLREGISTER_IC_1_BYTE] = {0x00, 0xFD, 0x00, 0x0C, 0x20, 0x03};
  ADI_REG_TYPE R4_DELAY_IC_1_Default[R4_DELAY_IC_1_SIZE] = {0x00, 0x64};
  ADI_REG_TYPE R5_SERIAL_PORT_CONTROL_REGISTERS_IC_1_Default[R5_SERIAL_PORT_CONTROL_REGISTERS_IC_1_SIZE] = {0x00, 0x00};
  ADI_REG_TYPE R6_ALC_CONTROL_REGISTERS_IC_1_Default[R6_ALC_CONTROL_REGISTERS_IC_1_SIZE] = {0x00, 0x00, 0x00, 0x00};
  ADI_REG_TYPE R7_MICCTRLREGISTER_IC_1_Default[REG_MICCTRLREGISTER_IC_1_BYTE] = {0x00};
  ADI_REG_TYPE R8_RECORD_INPUT_SIGNAL_PATH_REGISTERS_IC_1_Default[R8_RECORD_INPUT_SIGNAL_PATH_REGISTERS_IC_1_SIZE] = {0x00, 0x01, 0x05, 0x01, 0x05, 0x00, 0x00, 0x00};
  ADI_REG_TYPE R9_ADC_CONTROL_REGISTERS_IC_1_Default[R9_ADC_CONTROL_REGISTERS_IC_1_SIZE] = {0x13, 0x00, 0x00};
  ADI_REG_TYPE R10_PLAYBACK_OUTPUT_SIGNAL_PATH_REGISTERS_IC_1_Default[R10_PLAYBACK_OUTPUT_SIGNAL_PATH_REGISTERS_IC_1_SIZE] = {0x21, 0x00, 0x41, 0x00, 0x00, 0x00, 0x01, 0xE7, 0xE7, 0x00, 0x00, 0xE5, 0x00, 0x03};
  ADI_REG_TYPE R11_CONVERTER_CONTROL_REGISTERS_IC_1_Default[R11_CONVERTER_CONTROL_REGISTERS_IC_1_SIZE] = {0x00, 0x00};
  ADI_REG_TYPE R12_DAC_CONTROL_REGISTERS_IC_1_Default[R12_DAC_CONTROL_REGISTERS_IC_1_SIZE] = {0x03, 0x00, 0x00};
  ADI_REG_TYPE R13_SERIAL_PORT_PAD_CONTROL_REGISTERS_IC_1_Default[R13_SERIAL_PORT_PAD_CONTROL_REGISTERS_IC_1_SIZE] = {0xAA};
  ADI_REG_TYPE R14_COMMUNICATION_PORT_PAD_CONTROL_REGISTERS_IC_1_Default[R14_COMMUNICATION_PORT_PAD_CONTROL_REGISTERS_IC_1_SIZE] = {0xAA, 0x00};
  ADI_REG_TYPE R15_JACKREGISTER_IC_1_Default[REG_JACKREGISTER_IC_1_BYTE] = {0x08};
  ADI_REG_TYPE R21_DSP_ENABLE_REGISTER_IC_1_Default[REG_DSP_ENABLE_REGISTER_IC_1_BYTE] = {0x01};
  ADI_REG_TYPE R22_CRC_REGISTERS_IC_1_Default[R22_CRC_REGISTERS_IC_1_SIZE] = {0x7F, 0x7F, 0x7F, 0x7F, 0x01};
  ADI_REG_TYPE R23_GPIO_REGISTERS_IC_1_Default[R23_GPIO_REGISTERS_IC_1_SIZE] = {0x00, 0x00, 0x00, 0x00};
  ADI_REG_TYPE R24_NON_MODULO_REGISTERS_IC_1_Default[R24_NON_MODULO_REGISTERS_IC_1_SIZE] = {0x0F, 0xFE};
  ADI_REG_TYPE R25_WATCHDOG_REGISTERS_IC_1_Default[R25_WATCHDOG_REGISTERS_IC_1_SIZE] = {0x00, 0x04, 0x00, 0x00, 0x00};
  ADI_REG_TYPE R26_SAMPLE_RATE_SETTING_IC_1_Default[REG_SAMPLE_RATE_SETTING_IC_1_BYTE] = {0x7F};
  ADI_REG_TYPE R27_ROUTING_MATRIX_INPUTS_IC_1_Default[REG_ROUTING_MATRIX_INPUTS_IC_1_BYTE] = {0x00};
  ADI_REG_TYPE R28_ROUTING_MATRIX_OUTPUTS_IC_1_Default[REG_ROUTING_MATRIX_OUTPUTS_IC_1_BYTE] = {0x00};
  ADI_REG_TYPE R29_SERIAL_DATAGPIO_PIN_CONFIG_IC_1_Default[REG_SERIAL_DATAGPIO_PIN_CONFIG_IC_1_BYTE] = {0x00};
  ADI_REG_TYPE R30_DSP_SLEW_MODES_IC_1_Default[REG_DSP_SLEW_MODES_IC_1_BYTE] = {0x00};
  ADI_REG_TYPE R31_SERIAL_PORT_SAMPLE_RATE_SETTING_IC_1_Default[REG_SERIAL_PORT_SAMPLE_RATE_SETTING_IC_1_BYTE] = {0x00};
  ADI_REG_TYPE R32_CLOCK_ENABLE_REGISTERS_IC_1_Default[R32_CLOCK_ENABLE_REGISTERS_IC_1_SIZE] = {0x7F, 0x03};
  ADI_REG_TYPE NON_MODULO_RAM_Data_IC_1[NON_MODULO_RAM_SIZE_IC_1] = {0x00, 0x7F, 0xF2, 0x59, 0x00, 0x00, 0x0D, 0xA7};
  ADI_REG_TYPE R36_SAMPLE_RATE_SETTING_IC_1_Default[REG_SAMPLE_RATE_SETTING_IC_1_BYTE] = {0x01};
  ADI_REG_TYPE R37_DSP_RUN_REGISTER_IC_1_Default[REG_DSP_RUN_REGISTER_IC_1_BYTE] = {0x01};
  ADI_REG_TYPE R38_DEJITTER_REGISTER_CONTROL_IC_1_Default[REG_DEJITTER_REGISTER_CONTROL_IC_1_BYTE] = {0x00};
  ADI_REG_TYPE R39_DEJITTER_REGISTER_CONTROL_IC_1_Default[REG_DEJITTER_REGISTER_CONTROL_IC_1_BYTE] = {0x03};
  
  // Program Clear Block Data (stored in PROGMEM so it doesn't take up SRAM)
  const static ADI_REG_TYPE R16_PROGRAM_CLEAR_BLOCK_Default[PROGRAM_CLEAR_BLOCK_0_SIZE] PROGMEM = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    
  };

  // Program Data (stored in PROGMEM so it doesn't take up SRAM). Your data will vary.
  const static ADI_REG_TYPE Program_Data_IC_1[PROGRAM_SIZE_IC_1] PROGMEM = {
    
  0x00, 0x00, 0x00, 0x00, 0x00, 
  0xFE, 0xE0, 0x00, 0x00, 0x00, 
  0xFF, 0x34, 0x00, 0x00, 0x00, 
  0xFF, 0x2C, 0x00, 0x00, 0x00, 
  0xFF, 0x54, 0x00, 0x00, 0x00, 
  0xFF, 0x5C, 0x00, 0x00, 0x00, 
  0xFF, 0xF5, 0x08, 0x20, 0x00, 
  0xFF, 0x38, 0x00, 0x00, 0x00, 
  0xFF, 0x80, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 
  0xFE, 0xE8, 0x0C, 0x00, 0x00, 
  0xFE, 0x30, 0x00, 0xE2, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 
  0xFF, 0xE8, 0x07, 0x20, 0x08, 
  0x00, 0x00, 0x06, 0xA0, 0x00, 
  0xFF, 0xE0, 0x00, 0xC0, 0x00, 
  0xFF, 0x80, 0x07, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 
  0xFF, 0x00, 0x00, 0x00, 0x00, 
  0xFE, 0xC0, 0x22, 0x00, 0x27, 
  0x00, 0x00, 0x00, 0x00, 0x00, 
  0xFE, 0xE8, 0x1E, 0x00, 0x00, 
  0xFF, 0xE8, 0x01, 0x20, 0x00, 
  0xFF, 0xD8, 0x01, 0x03, 0x00, 
  0x00, 0x07, 0xC6, 0x00, 0x00, 
  0xFF, 0x08, 0x00, 0x00, 0x00, 
  0xFF, 0xF4, 0x00, 0x20, 0x00, 
  0xFF, 0xD8, 0x07, 0x02, 0x00, 
  0xFD, 0xA5, 0x08, 0x20, 0x00, 
  0x00, 0x00, 0x00, 0xE2, 0x00, 
  0xFD, 0xAD, 0x08, 0x20, 0x00, 
  0x00, 0x08, 0x00, 0xE2, 0x00, 
  0x00, 0x00, 0x08, 0x20, 0x00, 
  0x00, 0x08, 0x08, 0x22, 0x00, 
  0x00, 0x20, 0x00, 0xE2, 0x00, 
  0x00, 0x48, 0x0C, 0x20, 0x00, 
  0x00, 0x40, 0x0D, 0x22, 0x00, 
  0x00, 0x30, 0x0C, 0x34, 0x00, 
  0x00, 0x28, 0x0D, 0x22, 0x00, 
  0x00, 0x20, 0x09, 0x22, 0x00, 
  0x00, 0x18, 0x0A, 0x22, 0x00, 
  0x00, 0x10, 0x0B, 0x22, 0x00, 
  0x00, 0x38, 0x00, 0xE2, 0x00, 
  0x00, 0x50, 0x00, 0xF2, 0x00, 
  0x00, 0x78, 0x11, 0x20, 0x00, 
  0x00, 0x70, 0x12, 0x22, 0x00, 
  0x00, 0x60, 0x11, 0x34, 0x00, 
  0x00, 0x58, 0x12, 0x22, 0x00, 
  0x00, 0x38, 0x0E, 0x22, 0x00, 
  0x00, 0x30, 0x0F, 0x22, 0x00, 
  0x00, 0x28, 0x10, 0x22, 0x00, 
  0x00, 0x68, 0x00, 0xE2, 0x00, 
  0x00, 0x80, 0x00, 0xF2, 0x00, 
  0x00, 0xA8, 0x16, 0x20, 0x00, 
  0x00, 0xA0, 0x17, 0x22, 0x00, 
  0x00, 0x90, 0x16, 0x34, 0x00, 
  0x00, 0x88, 0x17, 0x22, 0x00, 
  0x00, 0x68, 0x13, 0x22, 0x00, 
  0x00, 0x60, 0x14, 0x22, 0x00, 
  0x00, 0x58, 0x15, 0x22, 0x00, 
  0x00, 0x98, 0x00, 0xE2, 0x00, 
  0x00, 0xB0, 0x00, 0xF2, 0x00, 
  0x00, 0xD8, 0x1B, 0x20, 0x00, 
  0x00, 0xD0, 0x1C, 0x22, 0x00, 
  0x00, 0xC0, 0x1B, 0x34, 0x00, 
  0x00, 0xB8, 0x1C, 0x22, 0x00, 
  0x00, 0x98, 0x18, 0x22, 0x00, 
  0x00, 0x90, 0x19, 0x22, 0x00, 
  0x00, 0x88, 0x1A, 0x22, 0x00, 
  0x00, 0xC8, 0x00, 0xE2, 0x00, 
  0x00, 0xE0, 0x00, 0xF2, 0x00, 
  0x01, 0x08, 0x20, 0x20, 0x00, 
  0x01, 0x00, 0x21, 0x22, 0x00, 
  0x00, 0xF0, 0x20, 0x34, 0x00, 
  0x00, 0xE8, 0x21, 0x22, 0x00, 
  0x00, 0xC8, 0x1D, 0x22, 0x00, 
  0x00, 0xC0, 0x1E, 0x22, 0x00, 
  0x00, 0xB8, 0x1F, 0x22, 0x00, 
  0x00, 0xF8, 0x00, 0xE2, 0x00, 
  0x01, 0x10, 0x00, 0xF2, 0x00, 
  0x01, 0x38, 0x25, 0x20, 0x00, 
  0x01, 0x30, 0x26, 0x22, 0x00, 
  0x01, 0x20, 0x25, 0x34, 0x00, 
  0x01, 0x18, 0x26, 0x22, 0x00, 
  0x00, 0xF8, 0x22, 0x22, 0x00, 
  0x00, 0xF0, 0x23, 0x22, 0x00, 
  0x00, 0xE8, 0x24, 0x22, 0x00, 
  0x01, 0x28, 0x00, 0xE2, 0x00, 
  0x01, 0x40, 0x00, 0xF2, 0x00, 
  0x7F, 0xF0, 0x29, 0x20, 0x00, 
  0x7F, 0xF0, 0x28, 0x34, 0x00, 
  0x7F, 0xF8, 0x27, 0x22, 0x00, 
  0xFF, 0xD8, 0x28, 0x02, 0x00, 
  0xFF, 0xD8, 0x29, 0x12, 0x00, 
  0x01, 0x28, 0x28, 0x20, 0x00, 
  0x01, 0x48, 0x00, 0xE2, 0x00, 
  0x01, 0x48, 0x2A, 0x20, 0x00, 
  0x01, 0x70, 0x00, 0xE2, 0x00, 
  0x01, 0x98, 0x2D, 0x20, 0x00, 
  0x01, 0x90, 0x2F, 0x22, 0x00, 
  0x01, 0x80, 0x2D, 0x34, 0x00, 
  0x01, 0x78, 0x2F, 0x22, 0x00, 
  0x01, 0x70, 0x2B, 0x22, 0x00, 
  0x01, 0x68, 0x2C, 0x22, 0x00, 
  0x01, 0x60, 0x2E, 0x22, 0x00, 
  0x01, 0x88, 0x00, 0xE2, 0x00, 
  0x01, 0xA0, 0x00, 0xF2, 0x00, 
  0x01, 0xC8, 0x32, 0x20, 0x00, 
  0x01, 0xC0, 0x34, 0x22, 0x00, 
  0x01, 0xB0, 0x32, 0x34, 0x00, 
  0x01, 0xA8, 0x34, 0x22, 0x00, 
  0x01, 0x88, 0x30, 0x22, 0x00, 
  0x01, 0x80, 0x31, 0x22, 0x00, 
  0x01, 0x78, 0x33, 0x22, 0x00, 
  0x01, 0xB8, 0x00, 0xE2, 0x00, 
  0x01, 0x50, 0x00, 0xE2, 0x00, 
  0x01, 0xD0, 0x00, 0xF2, 0x00, 
  0x01, 0x4D, 0x08, 0x20, 0x00, 
  0x01, 0xE8, 0x00, 0xE2, 0x00, 
  0x02, 0x10, 0x37, 0x20, 0x00, 
  0x02, 0x08, 0x39, 0x22, 0x00, 
  0x01, 0xF8, 0x37, 0x34, 0x00, 
  0x01, 0xF0, 0x39, 0x22, 0x00, 
  0x01, 0xE8, 0x35, 0x22, 0x00, 
  0x01, 0xE0, 0x36, 0x22, 0x00, 
  0x01, 0xD8, 0x38, 0x22, 0x00, 
  0x02, 0x00, 0x00, 0xE2, 0x00, 
  0x02, 0x18, 0x00, 0xF2, 0x00, 
  0x02, 0x40, 0x3C, 0x20, 0x00, 
  0x02, 0x38, 0x3E, 0x22, 0x00, 
  0x02, 0x28, 0x3C, 0x34, 0x00, 
  0x02, 0x20, 0x3E, 0x22, 0x00, 
  0x02, 0x00, 0x3A, 0x22, 0x00, 
  0x01, 0xF8, 0x3B, 0x22, 0x00, 
  0x01, 0xF0, 0x3D, 0x22, 0x00, 
  0x02, 0x30, 0x00, 0xE2, 0x00, 
  0x01, 0x58, 0x00, 0xE2, 0x00, 
  0x02, 0x48, 0x00, 0xF2, 0x00, 
  0x01, 0x50, 0x00, 0xC0, 0x00, 
  0x01, 0x57, 0xFF, 0x20, 0x00, 
  0x02, 0xB0, 0x00, 0xE2, 0x00, 
  0x02, 0xB8, 0x00, 0xF2, 0x00, 
  0x02, 0x6D, 0x08, 0x20, 0x00, 
  0x02, 0x68, 0x61, 0x22, 0x40, 
  0x02, 0xB8, 0x61, 0x22, 0x00, 
  0x02, 0x5D, 0x08, 0x34, 0x00, 
  0x02, 0x58, 0x61, 0x22, 0x40, 
  0x02, 0xB0, 0x61, 0x82, 0x00, 
  0x02, 0xB0, 0x61, 0x22, 0x00, 
  0x02, 0x60, 0x00, 0xE2, 0x00, 
  0x02, 0x70, 0x00, 0xF2, 0x00, 
  0x02, 0xC0, 0x00, 0xF6, 0x00, 
  0x02, 0x8D, 0x08, 0x20, 0x08, 
  0x02, 0x90, 0x00, 0xE2, 0x00, 
  0x02, 0x7D, 0x08, 0x20, 0x00, 
  0xFF, 0xE8, 0x63, 0x22, 0x67, 
  0x02, 0x80, 0x00, 0xE2, 0x00, 
  0x02, 0xC5, 0x08, 0x22, 0x48, 
  0x02, 0xC5, 0x08, 0x20, 0x00, 
  0x02, 0x80, 0x00, 0xE2, 0x27, 
  0xFF, 0xE8, 0x62, 0x20, 0x00, 
  0x02, 0x90, 0x00, 0xE2, 0x27, 
  0x02, 0x95, 0x08, 0x20, 0x08, 
  0xFF, 0xFD, 0x08, 0x22, 0x40,   
  0x02, 0x90, 0x00, 0xE2, 0x26, 
  0x02, 0x85, 0x1A, 0x20, 0x00, 
  0x02, 0xC8, 0x00, 0xE2, 0x00, 
  0x02, 0xD0, 0x00, 0xF2, 0x00, 
  0x02, 0xC8, 0x00, 0xC0, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x40, 0xA1, 0x00, 
  0xFF, 0xE5, 0x08, 0x20, 0x00, 
  0x00, 0x00, 0x3F, 0xA1, 0x00, 
  0xFF, 0xE5, 0x08, 0x22, 0x40, 
  0x02, 0x98, 0x00, 0xE2, 0x00, 
  0x02, 0xD0, 0x00, 0xC0, 0x00, 
  0x02, 0x9F, 0xFF, 0x20, 0x00, 
  0xFF, 0xE5, 0x08, 0x22, 0x00, 
  0x02, 0xA8, 0x00, 0xE2, 0x00, 
  0x02, 0xA8, 0x00, 0xC0, 0x00, 
  0x01, 0x57, 0xFF, 0x20, 0x00, 
  0x02, 0x50, 0x00, 0xE2, 0x00, 
  0x01, 0x58, 0x00, 0xC0, 0x00, 
  0x01, 0x5F, 0xFF, 0x20, 0x00, 
  0x03, 0x38, 0x00, 0xE2, 0x00, 
  0x03, 0x40, 0x00, 0xF2, 0x00, 
  0x02, 0xF5, 0x08, 0x20, 0x00, 
  0x02, 0xF0, 0x86, 0x22, 0x40, 
  0x03, 0x40, 0x86, 0x22, 0x00, 
  0x02, 0xE5, 0x08, 0x34, 0x00, 
  0x02, 0xE0, 0x86, 0x22, 0x40, 
  0x03, 0x38, 0x86, 0x82, 0x00, 
  0x03, 0x38, 0x86, 0x22, 0x00, 
  0x02, 0xE8, 0x00, 0xE2, 0x00, 
  0x02, 0xF8, 0x00, 0xF2, 0x00, 
  0x03, 0x48, 0x00, 0xF6, 0x00, 
  0x03, 0x15, 0x08, 0x20, 0x08, 
  0x03, 0x18, 0x00, 0xE2, 0x00, 
  0x03, 0x05, 0x08, 0x20, 0x00, 
  0xFF, 0xE8, 0x88, 0x22, 0x67, 
  0x03, 0x08, 0x00, 0xE2, 0x00, 
  0x03, 0x4D, 0x08, 0x22, 0x48, 
  0x03, 0x4D, 0x08, 0x20, 0x00, 
  0x03, 0x08, 0x00, 0xE2, 0x27, 
  0xFF, 0xE8, 0x87, 0x20, 0x00, 
  0x03, 0x18, 0x00, 0xE2, 0x27, 
  0x03, 0x1D, 0x08, 0x20, 0x08, 
  0xFF, 0xFD, 0x08, 0x22, 0x40, 
  0x03, 0x18, 0x00, 0xE2, 0x26, 
  0x03, 0x0D, 0x1A, 0x20, 0x00, 
  0x03, 0x50, 0x00, 0xE2, 0x00, 
  0x03, 0x58, 0x00, 0xF2, 0x00, 
  0x03, 0x50, 0x00, 0xC0, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x65, 0xA1, 0x00, 
  0xFF, 0xE5, 0x08, 0x20, 0x00, 
  0x00, 0x00, 0x64, 0xA1, 0x00, 
  0xFF, 0xE5, 0x08, 0x22, 0x40, 
  0x03, 0x20, 0x00, 0xE2, 0x00, 
  0x03, 0x58, 0x00, 0xC0, 0x00, 
  0x03, 0x27, 0xFF, 0x20, 0x00, 
  0xFF, 0xE5, 0x08, 0x22, 0x00, 
  0x03, 0x30, 0x00, 0xE2, 0x00, 
  0x03, 0x30, 0x00, 0xC0, 0x00, 
  0x01, 0x5F, 0xFF, 0x20, 0x00, 
  0x02, 0xD8, 0x00, 0xE2, 0x00, 
  0x02, 0x50, 0x89, 0x20, 0x00, 
  0x02, 0xD8, 0x89, 0x22, 0x00, 
  0x03, 0x60, 0x00, 0xE2, 0x00, 
  0x03, 0x60, 0x8A, 0x20, 0x00, 
  0x03, 0x68, 0x00, 0xE2, 0x00, 
  0x03, 0x65, 0x08, 0x20, 0x00, 
  0xFD, 0xB0, 0x00, 0xE2, 0x00, 
  0x03, 0x6D, 0x08, 0x20, 0x00, 
  0xFD, 0xB8, 0x00, 0xE2, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 
  0xFE, 0x30, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 
  0xFE, 0xC0, 0x0F, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 
  
};

  // Parameter Data (stored in PROGMEM so it doesn't take up SRAM). Your data will vary.
  const static ADI_REG_TYPE Param_Data_IC_1[PARAM_SIZE_IC_1] PROGMEM = {
    
  0x00, 0x00, 0x0F, 0xFE, 
  0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 
  0x00, 0x40, 0x00, 0x00, 
  0x00, 0x7E, 0x64, 0x4A, 
  0x0F, 0x03, 0x37, 0x6C, 
  0x00, 0x7E, 0x64, 0x4A, 
  0x00, 0xFC, 0xC2, 0x3B, 
  0x0F, 0x83, 0x31, 0x12, 
  0x00, 0x7F, 0xCE, 0xA1, 
  0x0F, 0x00, 0x62, 0xBF, 
  0x00, 0x7F, 0xCE, 0xA1, 
  0x00, 0xFF, 0x9B, 0x70, 
  0x0F, 0x80, 0x60, 0xED, 
  0x00, 0x83, 0x20, 0x30, 
  0x0F, 0x05, 0x35, 0xD9, 
  0x00, 0x77, 0xD3, 0xDC, 
  0x00, 0xFA, 0xCA, 0x27, 
  0x0F, 0x85, 0x0B, 0xF5, 
  0x00, 0x71, 0x3E, 0xD3, 
  0x0F, 0x37, 0x8F, 0x61, 
  0x00, 0x5E, 0x6B, 0x45, 
  0x00, 0xC8, 0x70, 0x9F, 
  0x0F, 0xB0, 0x55, 0xE8, 
  0x00, 0x92, 0x23, 0x2F, 
  0x0F, 0x90, 0x1B, 0x57, 
  0x00, 0x15, 0xEE, 0x73, 
  0x00, 0x6F, 0xE4, 0xA9, 
  0x0F, 0xD7, 0xEE, 0x5D, 
  0x00, 0x25, 0x19, 0x1D, 
  0x00, 0x4A, 0x32, 0x3A, 
  0x00, 0x25, 0x19, 0x1D, 
  0x00, 0x01, 0x92, 0x86, 
  0x0F, 0xEA, 0x09, 0x07, 
  0x00, 0x05, 0x18, 0x84, 
  0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 
  0x00, 0x80, 0x00, 0x00, 
  0x00, 0x00, 0x80, 0x53, 
  0x00, 0x01, 0x00, 0xA6, 
  0x00, 0xE8, 0x5D, 0x19, 
  0x00, 0x00, 0x80, 0x53, 
  0x0F, 0x95, 0xA1, 0x9C, 
  0x00, 0x00, 0x80, 0x53, 
  0x00, 0x01, 0x00, 0xA6, 
  0x00, 0xE8, 0x5D, 0x19, 
  0x00, 0x00, 0x80, 0x53, 
  0x0F, 0x95, 0xA1, 0x9C, 
  0x00, 0x74, 0xDE, 0x7B, 
  0x0F, 0x16, 0x43, 0x09, 
  0x00, 0xE8, 0xC4, 0xB3, 
  0x00, 0x74, 0xDE, 0x7B, 
  0x0F, 0x95, 0x4A, 0xC5, 
  0x00, 0x74, 0xDE, 0x7B, 
  0x0F, 0x16, 0x43, 0x09, 
  0x00, 0xE8, 0xC4, 0xB3, 
  0x00, 0x74, 0xDE, 0x7B, 
  0x0F, 0x95, 0x4A, 0xC5, 
  0x07, 0x10, 0x0C, 0x4D, 
  0x07, 0x10, 0x0C, 0x4D, 
  0x07, 0x10, 0x0C, 0x4D, 
  0x07, 0x10, 0x0C, 0x4D, 
  0x07, 0x10, 0x0C, 0x4D, 
  0x07, 0x10, 0x0C, 0x4D, 
  0x07, 0x10, 0x0C, 0x4D, 
  0x07, 0x10, 0x0C, 0x4D, 
  0x07, 0x10, 0x0C, 0x4D, 
  0x07, 0x10, 0x0C, 0x4D, 
  0x07, 0x10, 0x0C, 0x4D, 
  0x07, 0x10, 0x0C, 0x4D, 
  0x07, 0x10, 0x0C, 0x4D, 
  0x07, 0x10, 0x0C, 0x4D, 
  0x07, 0x10, 0x0C, 0x4D, 
  0x07, 0x10, 0x0C, 0x4D, 
  0x07, 0x10, 0x0C, 0x4D, 
  0x07, 0x10, 0x0C, 0x4D, 
  0x06, 0xDD, 0x8E, 0xF3, 
  0x06, 0x51, 0xEA, 0xD9, 
  0x05, 0x76, 0x1F, 0x60, 
  0x04, 0x6E, 0x7F, 0xB9, 
  0x03, 0x6D, 0x38, 0xFB, 
  0x02, 0x8D, 0x8B, 0xF4, 
  0x01, 0xDA, 0x96, 0x9B, 
  0x01, 0x53, 0xF6, 0x5F, 
  0x00, 0xF1, 0xA5, 0x1B, 
  0x00, 0xAB, 0xE9, 0x80, 
  0x00, 0x7A, 0x20, 0x51, 
  0x00, 0x56, 0xA4, 0x67, 
  0x00, 0x3D, 0x66, 0x70, 
  0x00, 0x2B, 0x7A, 0xD4, 
  0x00, 0x1E, 0xC8, 0x16, 
  0x00, 0x15, 0xCA, 0xAC, 
  0x00, 0x00, 0x98, 0x0A, 
  0x00, 0x00, 0x12, 0xC0, 
  0x00, 0x00, 0x00, 0x5B, 
  0x07, 0x10, 0x0C, 0x4D, 
  0x07, 0x10, 0x0C, 0x4D, 
  0x07, 0x10, 0x0C, 0x4D, 
  0x07, 0x10, 0x0C, 0x4D, 
  0x07, 0x10, 0x0C, 0x4D, 
  0x07, 0x10, 0x0C, 0x4D, 
  0x07, 0x10, 0x0C, 0x4D, 
  0x07, 0x10, 0x0C, 0x4D, 
  0x07, 0x10, 0x0C, 0x4D, 
  0x07, 0x10, 0x0C, 0x4D, 
  0x07, 0x10, 0x0C, 0x4D, 
  0x07, 0x10, 0x0C, 0x4D, 
  0x07, 0x10, 0x0C, 0x4D, 
  0x07, 0x10, 0x0C, 0x4D, 
  0x07, 0x10, 0x0C, 0x4D, 
  0x07, 0x10, 0x0C, 0x4D, 
  0x07, 0x10, 0x0C, 0x4D, 
  0x07, 0x10, 0x0C, 0x4D, 
  0x07, 0x04, 0xD5, 0x44, 
  0x06, 0xB8, 0x8B, 0xC3, 
  0x06, 0x16, 0x41, 0xDC, 
  0x05, 0x33, 0xF8, 0x42, 
  0x04, 0x3B, 0x78, 0x2A, 
  0x03, 0x50, 0xE1, 0x21, 
  0x02, 0x87, 0xC0, 0xB4, 
  0x01, 0xE7, 0x0B, 0xF7, 
  0x01, 0x61, 0xA8, 0x2A, 
  0x01, 0x02, 0x17, 0xCB, 
  0x00, 0xBA, 0xA9, 0xFD, 
  0x00, 0x85, 0xE2, 0x97, 
  0x00, 0x5F, 0x60, 0x1E, 
  0x00, 0x43, 0xA2, 0x27, 
  0x00, 0x2F, 0xE2, 0x18, 
  0x00, 0x21, 0xE6, 0x10, 
  0x00, 0x00, 0x98, 0x0A, 
  0x00, 0x00, 0x12, 0xC0, 
  0x00, 0x00, 0x00, 0x5B, 
  0x00, 0x40, 0x00, 0x00, 
  0x0F, 0x80, 0x00, 0x00, 
  
};

/******************************************************************************************************************************/

  // call the SIGMA_WRITE_REGISTER_BLOCK several times in the identical fasion as it appears in the Sigma Studio capture window
  // your invidual sequence of SIGMA_WRITE_REGISTER_BLOCK will vary.
  
  SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_SAMPLE_RATE_SETTING_IC_1_ADDR, REG_SAMPLE_RATE_SETTING_IC_1_BYTE, R0_SAMPLE_RATE_SETTING_IC_1_Default );
  SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_DSP_RUN_REGISTER_IC_1_ADDR, REG_DSP_RUN_REGISTER_IC_1_BYTE, R1_DSP_RUN_REGISTER_IC_1_Default );
  SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_CLKCTRLREGISTER_IC_1_ADDR, REG_CLKCTRLREGISTER_IC_1_BYTE, R2_CLKCTRLREGISTER_IC_1_Default ); 
  SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_PLLCRLREGISTER_IC_1_ADDR, REG_PLLCRLREGISTER_IC_1_BYTE, R3_PLLCRLREGISTER_IC_1_Default );
  SIGMA_WRITE_DELAY( DEVICE_ADDR_IC_1, R4_DELAY_IC_1_SIZE, R4_DELAY_IC_1_Default );
  SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_SERIAL_PORT_CONTROL_0_IC_1_ADDR , R5_SERIAL_PORT_CONTROL_REGISTERS_IC_1_SIZE, R5_SERIAL_PORT_CONTROL_REGISTERS_IC_1_Default );
  SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_ALC_CONTROL_0_IC_1_ADDR , R6_ALC_CONTROL_REGISTERS_IC_1_SIZE, R6_ALC_CONTROL_REGISTERS_IC_1_Default );
  SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_MICCTRLREGISTER_IC_1_ADDR, REG_MICCTRLREGISTER_IC_1_BYTE, R7_MICCTRLREGISTER_IC_1_Default );
  SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_RECORD_PWR_MANAGEMENT_IC_1_ADDR , R8_RECORD_INPUT_SIGNAL_PATH_REGISTERS_IC_1_SIZE, R8_RECORD_INPUT_SIGNAL_PATH_REGISTERS_IC_1_Default );
  SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_ADC_CONTROL_0_IC_1_ADDR , R9_ADC_CONTROL_REGISTERS_IC_1_SIZE, R9_ADC_CONTROL_REGISTERS_IC_1_Default );
  SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_PLAYBACK_MIXER_LEFT_CONTROL_0_IC_1_ADDR , R10_PLAYBACK_OUTPUT_SIGNAL_PATH_REGISTERS_IC_1_SIZE, R10_PLAYBACK_OUTPUT_SIGNAL_PATH_REGISTERS_IC_1_Default );
  SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_CONVERTER_CTRL_0_IC_1_ADDR , R11_CONVERTER_CONTROL_REGISTERS_IC_1_SIZE, R11_CONVERTER_CONTROL_REGISTERS_IC_1_Default );
  SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_DAC_CONTROL_0_IC_1_ADDR , R12_DAC_CONTROL_REGISTERS_IC_1_SIZE, R12_DAC_CONTROL_REGISTERS_IC_1_Default );
  SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_SERIAL_PORT_PAD_CONTROL_0_IC_1_ADDR , R13_SERIAL_PORT_PAD_CONTROL_REGISTERS_IC_1_SIZE, R13_SERIAL_PORT_PAD_CONTROL_REGISTERS_IC_1_Default );
  SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_COMM_PORT_PAD_CTRL_0_IC_1_ADDR , R14_COMMUNICATION_PORT_PAD_CONTROL_REGISTERS_IC_1_SIZE, R14_COMMUNICATION_PORT_PAD_CONTROL_REGISTERS_IC_1_Default );
  SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_JACKREGISTER_IC_1_ADDR, REG_JACKREGISTER_IC_1_BYTE, R15_JACKREGISTER_IC_1_Default );
  SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, PROGRAM_CLEAR_BLOCK_0_ADDR, PROGRAM_CLEAR_BLOCK_0_SIZE, R16_PROGRAM_CLEAR_BLOCK_Default);
  SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, PROGRAM_CLEAR_BLOCK_1_ADDR, PROGRAM_CLEAR_BLOCK_0_SIZE, R16_PROGRAM_CLEAR_BLOCK_Default);
  SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, PROGRAM_CLEAR_BLOCK_2_ADDR, PROGRAM_CLEAR_BLOCK_0_SIZE, R16_PROGRAM_CLEAR_BLOCK_Default);
  SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, PROGRAM_CLEAR_BLOCK_3_ADDR, PROGRAM_CLEAR_BLOCK_0_SIZE, R16_PROGRAM_CLEAR_BLOCK_Default);
  SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, PROGRAM_CLEAR_BLOCK_4_ADDR, PROGRAM_CLEAR_BLOCK_4_SIZE, R16_PROGRAM_CLEAR_BLOCK_Default);
  SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_DSP_ENABLE_REGISTER_IC_1_ADDR, REG_DSP_ENABLE_REGISTER_IC_1_BYTE, R21_DSP_ENABLE_REGISTER_IC_1_Default );
  SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_CRC_IDEAL_1_IC_1_ADDR , R22_CRC_REGISTERS_IC_1_SIZE, R22_CRC_REGISTERS_IC_1_Default );
  SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_GPIO_0_CONTROL_IC_1_ADDR , R23_GPIO_REGISTERS_IC_1_SIZE, R23_GPIO_REGISTERS_IC_1_Default );
  SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_NON_MODULO_RAM_1_IC_1_ADDR , R24_NON_MODULO_REGISTERS_IC_1_SIZE, R24_NON_MODULO_REGISTERS_IC_1_Default );
  SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_WATCHDOG_ENABLE_IC_1_ADDR , R25_WATCHDOG_REGISTERS_IC_1_SIZE, R25_WATCHDOG_REGISTERS_IC_1_Default );
  SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_SAMPLE_RATE_SETTING_IC_1_ADDR, REG_SAMPLE_RATE_SETTING_IC_1_BYTE, R26_SAMPLE_RATE_SETTING_IC_1_Default );
  SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_ROUTING_MATRIX_INPUTS_IC_1_ADDR, REG_ROUTING_MATRIX_INPUTS_IC_1_BYTE, R27_ROUTING_MATRIX_INPUTS_IC_1_Default );
  SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_ROUTING_MATRIX_OUTPUTS_IC_1_ADDR, REG_ROUTING_MATRIX_OUTPUTS_IC_1_BYTE, R28_ROUTING_MATRIX_OUTPUTS_IC_1_Default );
  SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_SERIAL_DATAGPIO_PIN_CONFIG_IC_1_ADDR, REG_SERIAL_DATAGPIO_PIN_CONFIG_IC_1_BYTE, R29_SERIAL_DATAGPIO_PIN_CONFIG_IC_1_Default );
  SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_DSP_SLEW_MODES_IC_1_ADDR, REG_DSP_SLEW_MODES_IC_1_BYTE, R30_DSP_SLEW_MODES_IC_1_Default );
  SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_SERIAL_PORT_SAMPLE_RATE_SETTING_IC_1_ADDR, REG_SERIAL_PORT_SAMPLE_RATE_SETTING_IC_1_BYTE, R31_SERIAL_PORT_SAMPLE_RATE_SETTING_IC_1_Default );
  SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_CLOCK_ENABLE_REG_0_IC_1_ADDR , R32_CLOCK_ENABLE_REGISTERS_IC_1_SIZE, R32_CLOCK_ENABLE_REGISTERS_IC_1_Default );
  SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, PROGRAM_ADDR_IC_1, PROGRAM_SIZE_IC_1, Program_Data_IC_1 );
  SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, PARAM_ADDR_IC_1, PARAM_SIZE_IC_1, Param_Data_IC_1 );
  SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, NON_MODULO_RAM_ADDR_IC_1, NON_MODULO_RAM_SIZE_IC_1, NON_MODULO_RAM_Data_IC_1 );
  SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_SAMPLE_RATE_SETTING_IC_1_ADDR, REG_SAMPLE_RATE_SETTING_IC_1_BYTE, R36_SAMPLE_RATE_SETTING_IC_1_Default );
  SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_DSP_RUN_REGISTER_IC_1_ADDR, REG_DSP_RUN_REGISTER_IC_1_BYTE, R37_DSP_RUN_REGISTER_IC_1_Default );
  SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_DEJITTER_REGISTER_CONTROL_IC_1_ADDR, REG_DEJITTER_REGISTER_CONTROL_IC_1_BYTE, R38_DEJITTER_REGISTER_CONTROL_IC_1_Default );
  SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_DEJITTER_REGISTER_CONTROL_IC_1_ADDR, REG_DEJITTER_REGISTER_CONTROL_IC_1_BYTE, R39_DEJITTER_REGISTER_CONTROL_IC_1_Default );

}




//-------------------------------------------------------------------------------------------------------------------------------




long count = 0;

/*
 * main loop
 */

void loop() {
  while (count < 1) { //call IC_Default_download only once
    IC_Default_Download(); 
    count++;
    delay(3600000); //delay 1hr time so the ATMega doesn't accumulate too quickly
    }
}
